@using Blazor.Serialization.Extensions

<MudStack>
    <MudToolBar DisableGutters="true">
        <MudText Typo="Typo.h4">@Title</MudText>
        <MudSpacer />
        @ChildContent
        <MudPaper Outlined="true" Class="flex-grow-1 pb-2 pl-3">
            <MudTextField @bind-Value="_filter" Placeholder="Search photos" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-n2" DisableUnderLine="true">
            </MudTextField>
        </MudPaper>
    </MudToolBar>
    <MudTable Items=@Photos Hover="true" Breakpoint="Breakpoint.Sm" AllowUnsorted=true Filter=OnFilter
              CanCancelEdit=true Context="photo" Dense=true FixedHeader=true RowsPerPage=10 RowEditCommit=OnEdit
              RowEditPreview=BackupItem RowEditCancel=RevertEditChanges ReadOnly=false SortLabel="Sort By"
              CancelEditTooltip="Discard changes..." CommitEditTooltip="Save changes..." Outlined="true"
              IsEditRowSwitchingBlocked=true>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy=@(new Func<PhotoDetails, object>(p => p.Name))>
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy=@(new Func<PhotoDetails, object>(p => p.Description))>
                    Description
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy=@(new Func<PhotoDetails, object>(p => p.Quantity))>
                    Quantity
                </MudTableSortLabel>
            </MudTh>
        
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@photo.Name</MudTd>
            <MudTd DataLabel="Description">@photo.Description</MudTd>
            <MudTd DataLabel="Quantity">@photo.Quantity.ToString("N0")</MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Name">
                <MudTextField @bind-Value=@photo.Name Required />
            </MudTd>
            <MudTd DataLabel="Description">
                <MudTextField @bind-Value=@photo.Description Required />
            </MudTd>
            <MudTd DataLabel="Quantity">
                <MudNumericField @bind-Value=@photo.Quantity Required Min="1" />
            </MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudStack>

@code {
    string? _filter;

    PhotoDetails? _photoBeforeEdit;

    [Parameter, EditorRequired]
    public HashSet<PhotoDetails> Photos { get; set; } = null!;

    [Parameter, EditorRequired]
    public string Title { get; set; } = null!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<PhotoDetails> EditPhoto { get; set; }

    void OnEdit(object model)
    {
        if (model is PhotoDetails photo &&
            EditPhoto.HasDelegate)
        {
            _ = EditPhoto.InvokeAsync(photo);
        }
    }

    void BackupItem(object model)
    {
        if (model is PhotoDetails photo)
        {
            _photoBeforeEdit = photo;
        }
    }

    void RevertEditChanges(object model)
    {
        if (model is PhotoDetails photo &&
            _photoBeforeEdit is not null)
        {
            model = _photoBeforeEdit with { };
        }
    }

    bool OnFilter(PhotoDetails photo) => photo.MatchesFilter(_filter);
}